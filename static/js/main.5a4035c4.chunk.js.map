{"version":3,"sources":["Square.js","Board.js","ToogleButton.js","Game.js","index.js"],"names":["Square","props","className","onClick","value","renderSquare","i","squares","winSquares","squareClass","Array","from","includes","key","Board","size","board","count","row","j","push","ToogleButton","action","useState","isAscending","SetIsAscending","Game","fill","history","setHistory","displayHistoryAscending","setDisplayStyle","stepNumber","setStepNumber","xIsNext","setXIsNext","getLocation","index","X","Math","floor","Y","current","moves","map","step","move","locationInfo","location","buttonDescription","buttonClass","jumpTo","calculateWinner","winRow","length","winner","winCol","winDiag","winDiag2","status","result","pow","history_copy","slice","concat","handleClick","reverse","App","boardSize","setBoardSize","options","for","id","onChange","event","parseInt","target","ReactDOM","render","document","getElementById"],"mappings":"2KAaeA,MAXf,SAAgBC,GACZ,OACI,4BACIC,UAAWD,EAAMC,UACjBC,QAASF,EAAME,SAEdF,EAAMG,QCLbC,EAAe,SAACC,EAAGC,EAASC,EAAYL,GAC1C,IAAMM,EAAcD,GAAcE,MAAMC,KAAKH,GAAYI,SAASN,GAA9C,4BAGpB,OACI,kBAAC,EAAD,CACIO,IAAKP,EACLJ,UAAWO,EACXL,MAAOG,EAAQD,GACfH,QAAS,kBAAMA,EAAQG,OAkBpBQ,EAbD,SAAC,GAGX,IAHuD,IAA1CC,EAAyC,EAAzCA,KAAMR,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,WAAYL,EAAc,EAAdA,QAClCa,EAAQ,GACVC,EAAQ,EACHX,EAAI,EAAGA,EAAIS,EAAMT,IAAK,CAE3B,IADA,IAAMY,EAAM,GACHC,EAAI,EAAGA,EAAIJ,EAAMI,IACtBD,EAAIE,KAAKf,EAAaY,IAASV,EAASC,EAAYL,IAExDa,EAAMI,KAAK,yBAAKP,IAAKP,EAAGJ,UAAU,aAAagB,IAEnD,OAAO,6BAAMF,ICTFK,EAhBM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACKC,qBADL,mBAC1BC,EAD0B,KACbC,EADa,KAQjC,OAAQ,4BACJvB,UAAU,eACVC,QAAS,kBANTmB,SACAG,GAAgBD,KAOfA,EAAc,yDAA0B,oDCkJlCE,MA5Jf,YAAyB,IAATX,EAAQ,EAARA,KAAQ,EACUQ,mBAAS,CAAC,CAAEhB,QAASG,MAAMK,EAAOA,GAAMY,KAAK,SADvD,mBACbC,EADa,KACJC,EADI,OAE+BN,oBAAS,GAFxC,mBAEbO,EAFa,KAEYC,EAFZ,OAGgBR,mBAAS,GAHzB,mBAGbS,EAHa,KAGDC,EAHC,OAIUV,oBAAS,GAJnB,mBAIbW,EAJa,KAIJC,EAJI,KAMdC,EAAc,SAACC,EAAOtB,GAGxB,MAAO,CAAEuB,EAFCC,KAAKC,MAAMH,EAAQtB,EAAO,GAErB0B,EADLJ,EAAQtB,EAAO,IA2BvB2B,EAAUd,EAAQI,GAClBW,EAAQf,EAAQgB,KAAI,SAACC,EAAMC,GAC7B,IAAMC,EAAeD,EAAI,+BACVlB,EAAQkB,GAAME,SAASV,EADb,aACmBV,EAAQkB,GAAME,SAASP,EAD1C,WAGnBQ,EAAoBH,EAAI,6BACZA,GADY,wBAGxBI,EAAcJ,IAASd,EAAT,mBAEhB,GACJ,OACI,wBAAInB,IAAKiC,GACJC,EACD,4BACI7C,UAAWgD,EACX/C,QAAS,kBAzBV,SAAC0C,GACZZ,EAAcY,GACdV,EAAYU,EAAO,IAAO,GAuBCM,CAAOL,KAErBG,OAMjB,SAASG,EAAgB7C,EAASQ,GAE9B,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAMT,IAAK,CAE3B,IADA,IAAM+C,EAAS,GACNlC,EAAI,EAAGA,EAAIJ,EAAMI,IAAK,CAC3B,IAAMkB,EAAQ/B,EAAIS,EAAOI,EACzB,IAAIZ,EAAQ8B,IAAU9B,EAAQ8B,KAAW9B,EAAQD,EAAIS,GAGjD,MAFAsC,EAAOjC,KAAKiB,GAKpB,GAAIgB,EAAOC,SAAWvC,EAClB,MAAO,CAAEwC,OAAQhD,EAAQD,EAAIS,GAAOP,WAAY6C,GAKxD,IAAK,IAAI/C,EAAI,EAAGA,EAAIS,EAAMT,IAAK,CAE3B,IADA,IAAMkD,EAAS,GACNrC,EAAI,EAAGA,EAAIJ,EAAMI,IAAK,CAC3B,IAAMkB,EAAQlB,EAAIJ,EAAOT,EACzB,IAAIC,EAAQ8B,IAAU9B,EAAQ8B,KAAW9B,EAAQD,GAG7C,MAFAkD,EAAOpC,KAAKiB,GAKpB,GAAImB,EAAOF,SAAWvC,EAClB,MAAO,CAAEwC,OAAQhD,EAAQD,GAAIE,WAAYgD,GAMjD,IADA,IAAMC,EAAU,GACPnD,EAAI,EAAGA,EAAIS,EAAMT,IAAK,CAC3B,IAAM+B,EAAQ/B,EAAIS,EAAOT,EACzB,IAAIC,EAAQ8B,IAAU9B,EAAQ8B,KAAW9B,EAAQ,GAG7C,MAFAkD,EAAQrC,KAAKiB,GAKrB,GAAIoB,EAAQH,SAAWvC,EACnB,MAAO,CAAEwC,OAAQhD,EAAQ,GAAIC,WAAYiD,GAK7C,IADA,IAAMC,EAAW,GACRpD,EAAI,EAAGA,GAAKS,EAAMT,IAAK,CAC5B,IAAM+B,EAAQ/B,GAAKS,EAAO,GAC1B,IAAIR,EAAQ8B,IAAU9B,EAAQ8B,KAAW9B,EAAQQ,EAAO,GAGpD,MAFA2C,EAAStC,KAAKiB,GAKtB,OAAIqB,EAASJ,SAAWvC,EACb,CAAEwC,OAAQhD,EAAQQ,EAAO,GAAIP,WAAYkD,GAE7C,KAIX,IACIC,EADEC,EAASR,EAAgBV,EAAQnC,QAASQ,GAE5CP,EAAa,GAUjB,OATIoD,GAAUA,EAAOL,QACjBI,EAAM,UAAMC,EAAOL,OAAb,gBACN/C,EAAaoD,EAAOpD,YAEpBmD,EADO/B,EAAQ0B,OAAS,IAAMf,KAAKsB,IAAI9C,EAAM,GACpC,SAEH,uCAAemB,EAAU,IAAM,KAIrC,yBAAKhC,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIa,KAAMA,EACNR,QAASmC,EAAQnC,QACjBC,WAAYA,EACZL,QAAS,SAACG,GAAD,OAlIL,SAACA,GACjB,IAAMwD,EAAelC,EAAQmC,MAAM,EAAG/B,EAAa,GAE7CzB,EADcuD,EAAaA,EAAaR,OAAS,GAC3B/C,QAAQwD,QAChCX,EAAgB7C,EAASQ,IAASR,EAAQD,KAC9CC,EAAQD,GAAK4B,EAAU,IAAM,IAC7BL,EAAWiC,EAAaE,OAAO,CAAC,CAC5BzD,QAASA,EACTyC,SAAUZ,EAAY9B,EAAGS,OAE7BkB,EAAc6B,EAAaR,QAC3BnB,GAAYD,IAuHgB+B,CAAY3D,OAGpC,yBAAKJ,UAAU,aACX,6BAAMyD,GACN,6BACI,kBAAC,EAAD,CAAcrC,OAAQ,WApHlCS,GAAiBD,OAsHT,4BAAKA,EAA0Ba,EAAQA,EAAMuB,c,KClJ7D,SAASC,IAGL,IAHY,IAAD,EACuB5C,mBAAS,GADhC,mBACJ6C,EADI,KACOC,EADP,KAELC,EAAU,GACPhE,EANU,EAMUA,GALV,EAK+BA,IAC9CgE,EAAQlD,KAAK,4BAAQhB,MAAOE,GAAIA,IAEpC,OACI,6BACI,0BAAMJ,UAAU,QACZ,2BAAOqE,IAAI,QAAX,4CACA,4BAAQC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAAWL,EAAaM,SAASD,EAAME,OAAOxE,UACrEkE,IAGT,kBAAC,EAAD,CAAMzD,IAAKuD,EAAWrD,KAAMqD,KAKxCS,IAASC,OACL,kBAACX,EAAD,MACAY,SAASC,eAAe,U","file":"static/js/main.5a4035c4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square","import React from 'react'\r\nimport Square from './Square'\r\n\r\nconst renderSquare = (i, squares, winSquares, onClick) => {\r\n    const squareClass = winSquares && Array.from(winSquares).includes(i) ?\r\n        `square-highlight` :\r\n        `square`;\r\n    return (\r\n        <Square\r\n            key={i}\r\n            className={squareClass}\r\n            value={squares[i]}\r\n            onClick={() => onClick(i)}\r\n        />\r\n    );\r\n}\r\n\r\nconst Board = ({ size, squares, winSquares, onClick }) => {\r\n    const board = []\r\n    let count = 0\r\n    for (let i = 0; i < size; i++) {\r\n        const row = []\r\n        for (let j = 0; j < size; j++) {\r\n            row.push(renderSquare(count++, squares, winSquares, onClick))\r\n        }\r\n        board.push(<div key={i} className=\"board-row\">{row}</div>)\r\n    }\r\n    return <div>{board}</div>\r\n}\r\n\r\nexport default Board","import React, { useState } from 'react'\r\n\r\nconst ToogleButton = ({ action }) => {\r\n    const [isAscending, SetIsAscending] = useState();\r\n\r\n    const handleClick = () => {\r\n        action();\r\n        SetIsAscending(!isAscending);\r\n    }\r\n\r\n    return (<button\r\n        className='toogleButton'\r\n        onClick={() => handleClick()}\r\n    >\r\n        {isAscending ? \"Nước đi mới dưới cùng\" : \"Nước đi mới trên cùng\"}\r\n    </button>);\r\n}\r\n\r\nexport default ToogleButton","import React, { useState } from 'react'\r\nimport Board from './Board'\r\nimport ToogleButton from './ToogleButton'\r\n\r\nfunction Game({ size }) {\r\n    const [history, setHistory] = useState([{ squares: Array(size * size).fill(null) }]);\r\n    const [displayHistoryAscending, setDisplayStyle] = useState(true);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n\r\n    const getLocation = (index, size) => {\r\n        const X = Math.floor(index / size + 1);\r\n        const Y = index % size + 1;\r\n        return { X: X, Y: Y };\r\n    }\r\n\r\n    const handleClick = (i) => {\r\n        const history_copy = history.slice(0, stepNumber + 1);\r\n        const currentcopy = history_copy[history_copy.length - 1];\r\n        const squares = currentcopy.squares.slice();\r\n        if (calculateWinner(squares, size) || squares[i]) return;\r\n        squares[i] = xIsNext ? 'X' : 'O';\r\n        setHistory(history_copy.concat([{\r\n            squares: squares,\r\n            location: getLocation(i, size)\r\n        }]));\r\n        setStepNumber(history_copy.length);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step)\r\n        setXIsNext((step % 2) === 0)\r\n    }\r\n\r\n    const changeHistoryOrder = () => {\r\n        setDisplayStyle(!displayHistoryAscending)\r\n    }\r\n\r\n    const current = history[stepNumber];\r\n    const moves = history.map((step, move) => {\r\n        const locationInfo = move ?\r\n            `Đi ở ô (${history[move].location.X}, ${history[move].location.Y}) \\t` :\r\n            ``;\r\n        const buttonDescription = move ?\r\n            `Khôi phục #${move}` :\r\n            `Xoá bàn cờ`;\r\n        const buttonClass = move === stepNumber ?\r\n            `button-highlight` :\r\n            '';\r\n        return (\r\n            <li key={move}>\r\n                {locationInfo}\r\n                <button\r\n                    className={buttonClass}\r\n                    onClick={() => jumpTo(move)}\r\n                >\r\n                    {buttonDescription}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    function calculateWinner(squares, size) {\r\n        //Kiểm tra hàng ngang\r\n        for (let i = 0; i < size; i++) {\r\n            const winRow = [];\r\n            for (let j = 0; j < size; j++) {\r\n                const index = i * size + j;\r\n                if (squares[index] && squares[index] === squares[i * size]) {\r\n                    winRow.push(index);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (winRow.length === size) {\r\n                return { winner: squares[i * size], winSquares: winRow };\r\n            }\r\n        }\r\n\r\n        //Kiểm tra hàng dọc\r\n        for (let i = 0; i < size; i++) {\r\n            const winCol = [];\r\n            for (let j = 0; j < size; j++) {\r\n                const index = j * size + i;\r\n                if (squares[index] && squares[index] === squares[i]) {\r\n                    winCol.push(index);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (winCol.length === size) {\r\n                return { winner: squares[i], winSquares: winCol };\r\n            }\r\n        }\r\n\r\n        //Kiểm tra chéo chính\r\n        const winDiag = [];\r\n        for (let i = 0; i < size; i++) {\r\n            const index = i * size + i;\r\n            if (squares[index] && squares[index] === squares[0]) {\r\n                winDiag.push(index);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (winDiag.length === size) {\r\n            return { winner: squares[0], winSquares: winDiag };\r\n        }\r\n\r\n        //Kiểm tra chéo phụ\r\n        const winDiag2 = [];\r\n        for (let i = 1; i <= size; i++) {\r\n            const index = i * (size - 1);\r\n            if (squares[index] && squares[index] === squares[size - 1]) {\r\n                winDiag2.push(index);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (winDiag2.length === size) {\r\n            return { winner: squares[size - 1], winSquares: winDiag2 };\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    const result = calculateWinner(current.squares, size);\r\n    let status;\r\n    let winSquares = [];\r\n    if (result && result.winner) {\r\n        status = `${result.winner} thắng!`;\r\n        winSquares = result.winSquares;\r\n    } else if (history.length - 1 === Math.pow(size, 2)) {\r\n        status = \"Hoà\"\r\n    } else {\r\n        status = `Đến lượt ${xIsNext ? 'X' : 'O'}`;\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board\r\n                    size={size}\r\n                    squares={current.squares}\r\n                    winSquares={winSquares}\r\n                    onClick={(i) => handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <div>\r\n                    <ToogleButton action={() => changeHistoryOrder()}></ToogleButton>\r\n                </div>\r\n                <ul>{displayHistoryAscending ? moves : moves.reverse()}</ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game'\r\nimport './index.css';\r\n\r\nconst MIN_BOARD_SIZE = 3;\r\nconst MAX_BOARD_SIZE = 5;\r\n\r\nfunction App() {\r\n    const [boardSize, setBoardSize] = useState(3);\r\n    const options = [];\r\n    for (let i = MIN_BOARD_SIZE; i <= MAX_BOARD_SIZE; i++) {\r\n        options.push(<option value={i}>{i}</option>)\r\n    }\r\n    return (\r\n        <div>\r\n            <form className=\"form\">\r\n                <label for=\"size\">Kích thước bàn cờ: </label>\r\n                <select id=\"size\" onChange={(event) => setBoardSize(parseInt(event.target.value))}>\r\n                    {options}\r\n                </select>\r\n            </form>\r\n            <Game key={boardSize} size={boardSize} />\r\n        </div>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}