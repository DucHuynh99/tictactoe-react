{"version":3,"sources":["Square.js","Board.js","ToogleButton.js","Game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","winsquares","this","winSquares","squareClass","Array","from","includes","key","squares","size","board","count","row","j","push","renderSquare","renderBoard","React","Component","ToogleButton","state","isAscending","action","setState","handleClick","calculateWinner","winRow","index","length","winner","winCol","winDiag","winDiag2","Game","totalSquareCount","Math","pow","history","fill","displayHistoryAscending","stepNumber","xIsNext","slice","concat","location","getLocation","X","floor","Y","step","status","current","moves","map","move","locationInfo","buttonDescription","buttonClass","jumpTo","result","changeHistoryOrder","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.659b5583.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square","import React from 'react'\r\nimport Square from './Square'\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        const winsquares = this.props.winSquares;\r\n        const squareClass = winsquares && Array.from(winsquares).includes(i) ?\r\n            `square-highlight` :\r\n            `square`;\r\n        return (\r\n            <Square\r\n                key={i}\r\n                className={squareClass}\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderBoard(size) {\r\n        const board = [];\r\n        let count = 0;\r\n        for (let i = 0; i < size; i++) {\r\n            const row = [];\r\n            for (let j = 0; j < size; j++) {\r\n                row.push(this.renderSquare(count++));\r\n            }\r\n            board.push(<div key={i} className=\"board-row\">{row}</div>);\r\n        }\r\n        return (<div>{board}</div>);\r\n    }\r\n\r\n    render() {\r\n        return this.renderBoard(this.props.size);\r\n    }\r\n}\r\n\r\nexport default Board","import React from 'react'\r\n\r\nclass ToogleButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAscending: true\r\n        }\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.action();\r\n        this.setState({\r\n            isAscending: !this.state.isAscending\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (<button\r\n            className='toogleButton'\r\n            onClick={() => this.handleClick()}\r\n        >\r\n            {this.state.isAscending ? \"Nước đi mới dưới cùng\" : \"Nước đi mới trên cùng\"}\r\n        </button>);\r\n    }\r\n}\r\n\r\nexport default ToogleButton","import React from 'react'\r\nimport Board from './Board'\r\nimport ToogleButton from './ToogleButton'\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const totalSquareCount = Math.pow(this.props.size, 2);\r\n        this.state = {\r\n            history: [\r\n                { squares: Array(totalSquareCount).fill(null) }\r\n            ],\r\n            displayHistoryAscending: true,\r\n            stepNumber: 0,\r\n            xIsNext: true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares, this.props.size) || squares[i]) return;\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: this.getLocation(i, this.props.size)\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    getLocation(index, size) {\r\n        const X = Math.floor(index / size + 1);\r\n        const Y = index % size + 1;\r\n        return { X: X, Y: Y };\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        });\r\n    }\r\n\r\n    changeHistoryOrder() {\r\n        this.setState({\r\n            displayHistoryAscending: !this.state.displayHistoryAscending\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const moves = history.map((step, move) => {\r\n            const locationInfo = move ?\r\n                `Đi ở ô (${history[move].location.X}, ${history[move].location.Y}) \\t` :\r\n                ``;\r\n            const buttonDescription = move ?\r\n                `Khôi phục #${move}` :\r\n                `Xoá bàn cờ`;\r\n            const buttonClass = move === this.state.stepNumber ?\r\n                `button-highlight` :\r\n                '';\r\n            return (\r\n                <li key={move}>\r\n                    {locationInfo}\r\n                    <button\r\n                        className={buttonClass}\r\n                        onClick={() => this.jumpTo(move)}\r\n                    >\r\n                        {buttonDescription}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        const result = calculateWinner(current.squares, this.props.size);\r\n        let status;\r\n        let winSquares = [];\r\n        if (result && result.winner) {\r\n            status = `${result.winner} thắng!`;\r\n            winSquares = result.winSquares;\r\n        } else if (history.length - 1 === Math.pow(this.props.size, 2)) {\r\n            status = \"Hoà\"\r\n        } else {\r\n            status = `Đến lượt ${this.state.xIsNext ? 'X' : 'O'}`;\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        size={this.props.size}\r\n                        squares={current.squares}\r\n                        winSquares={winSquares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <div>\r\n                        <ToogleButton action={() => this.changeHistoryOrder()}></ToogleButton>\r\n                    </div>\r\n                    <ul>{this.state.displayHistoryAscending ? moves : moves.reverse()}</ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares, size) {\r\n    //Kiểm tra hàng ngang\r\n    for (let i = 0; i < size; i++) {\r\n        const winRow = [];\r\n        for (let j = 0; j < size; j++) {\r\n            const index = i * size + j;\r\n            if (squares[index] && squares[index] === squares[i * size]) {\r\n                winRow.push(index);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (winRow.length === size) {\r\n            return { winner: squares[i * size], winSquares: winRow };\r\n        }\r\n    }\r\n\r\n    //Kiểm tra hàng dọc\r\n    for (let i = 0; i < size; i++) {\r\n        const winCol = [];\r\n        for (let j = 0; j < size; j++) {\r\n            const index = j * size + i;\r\n            if (squares[index] && squares[index] === squares[i]) {\r\n                winCol.push(index);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (winCol.length === size) {\r\n            return { winner: squares[i], winSquares: winCol };\r\n        }\r\n    }\r\n\r\n    //Kiểm tra chéo chính\r\n    const winDiag = [];\r\n    for (let i = 0; i < size; i++) {\r\n        const index = i * size + i;\r\n        if (squares[index] && squares[index] === squares[0]) {\r\n            winDiag.push(index);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    if (winDiag.length === size) {\r\n        return { winner: squares[0], winSquares: winDiag };\r\n    }\r\n\r\n    //Kiểm tra chéo phụ\r\n    const winDiag2 = [];\r\n    for (let i = 1; i <= size; i++) {\r\n        const index = i * (size - 1);\r\n        if (squares[index] && squares[index] === squares[size - 1]) {\r\n            winDiag2.push(index);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    if (winDiag2.length === size) {\r\n        return { winner: squares[size - 1], winSquares: winDiag2 };\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default Game","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game'\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <Game size={4} />,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}